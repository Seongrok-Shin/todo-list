@page "/login"
@using System.ComponentModel.DataAnnotations
@using ToDoWebApp.Services
@inject NavigationManager NavManager
@inject AuthService AuthService

<PageTitle>Sign In</PageTitle>

<div class="login-container min-vh-100 d-flex align-items-center">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5">
                <div class="card border-0 shadow-lg">
                    <div class="card-header bg-gradient-primary text-white text-center py-4">
                        <div class="login-icon mb-3">
                            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor"
                                 class="bi bi-person-circle" viewBox="0 0 16 16">
                                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0"/>
                                <path fill-rule="evenodd"
                                      d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8m8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1"/>
                            </svg>
                        </div>
                        <h1 class="h3 mb-0 fw-bold">Welcome Back</h1>
                        <p class="mb-0 opacity-75">Sign in to your account</p>
                    </div>
                    <div class="card-body p-5">
                        <EditForm Model="@_loginModel" OnValidSubmit="@HandleLogin" FormName="LoginForm">
                            <DataAnnotationsValidator/>

                            @if (!string.IsNullOrEmpty(_errorMessage))
                            {
                            <div class="alert alert-danger d-flex align-items-center" role="alert">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                     class="bi bi-exclamation-triangle-fill me-2" viewBox="0 0 16 16">
                                    <path
                                        d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
                                </svg>
                                @_errorMessage
                            </div>
                            }

                            @if (!string.IsNullOrEmpty(_successMessage))
                            {
                            <div class="alert alert-success d-flex align-items-center" role="alert">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                     class="bi bi-check-circle-fill me-2" viewBox="0 0 16 16">
                                    <path
                                        d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.061L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
                                </svg>
                                @_successMessage
                            </div>
                            }

                            <div class="mb-4">
                                <label for="email" class="form-label fw-semibold">Email Address</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light border-end-0">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                                             fill="currentColor" class="bi bi-envelope text-muted" viewBox="0 0 16 16">
                                            <path
                                                d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2Zm13 2.383-4.708 2.825L15 11.105V5.383Zm-.034 6.876-5.64-3.471L8 9.583l-1.326-.795-5.64 3.47A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.741ZM1 11.105l4.708-2.897L1 5.383v5.722Z"/>
                                        </svg>
                                    </span>
                                    <InputText @bind-Value="_loginModel.Email" class="form-control border-start-0"
                                               id="email" placeholder="Enter your email"/>
                                </div>
                                <ValidationMessage For="@(() => _loginModel.Email)" class="text-danger small mt-1"/>
                            </div>

                            <div class="mb-4">
                                <label for="password" class="form-label fw-semibold">Password</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light border-end-0">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                                             fill="currentColor" class="bi bi-lock text-muted" viewBox="0 0 16 16">
                                            <path
                                                d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2z"/>
                                        </svg>
                                    </span>
                                    <InputText @bind-Value="_loginModel.Password" type="password"
                                               class="form-control border-start-0" id="password"
                                               placeholder="Enter your password"/>
                                </div>
                                <ValidationMessage For="@(() => _loginModel.Password)" class="text-danger small mt-1"/>
                            </div>

                            <div class="d-grid mb-4">
                                <button type="submit" class="btn btn-primary btn-lg py-3" disabled="@_isLoading">
                                    @if (_isLoading)
                                    {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"
                                          aria-hidden="true"></span>
                                    <span>Signing In...</span>
                                    }
                                    else
                                    {
                                    <span>Sign In</span>
                                    }
                                </button>
                            </div>
                        </EditForm>

                        <div class="text-center">
                            <p class="text-muted mb-0">Don't have an account?
                                <a href="/signup" class="text-decoration-none fw-semibold">Create one now</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
private readonly LoginModel _loginModel = new();
private string? _errorMessage;
private bool _isLoading;
private string? _successMessage;

public class LoginModel
{
[Required(ErrorMessage = "Email is required")]
[EmailAddress(ErrorMessage = "Please enter a valid email address")]
public string Email { get; set; } = string.Empty;

[Required(ErrorMessage = "Password is required")]
public string Password { get; set; } = string.Empty;
}

protected override void OnInitialized()
{
// If already logged in, redirect to home
if (AuthService.IsLoggedIn)
{
NavManager.NavigateTo("/");
}
}

private async Task HandleLogin()
{
_errorMessage = null;
_successMessage = null;
_isLoading = true;

try
{
var (user, error) = await AuthService.SignIn(_loginModel.Email, _loginModel.Password);

if (user != null)
{
_successMessage = "Successfully signed in! Redirecting...";
StateHasChanged();
NavManager.NavigateTo("/");
}
else
{
_errorMessage = error ?? "Invalid email or password. Please try again.";
}
}
catch (Exception)
{
_errorMessage = "An unexpected error occurred. Please try again.";
}
finally
{
_isLoading = false;
}
}
}