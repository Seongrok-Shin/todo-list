@page "/login"
@using System.ComponentModel.DataAnnotations
@using ToDoWebApp.Services
@using ToDoWebApp.Models
@inject AuthService AuthService
@inject NavigationManager NavManager

<PageTitle>Sign In</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header">
                    <h3 class="text-center mb-0">Sign In</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@_loginModel" OnValidSubmit="@HandleLogin">
                        <DataAnnotationsValidator />
                        
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @_errorMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <InputText @bind-Value="_loginModel.Email" class="form-control" id="email" placeholder="Enter your email" />
                            <ValidationMessage For="@(() => _loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText @bind-Value="_loginModel.Password" type="password" class="form-control" id="password" placeholder="Enter your password" />
                            <ValidationMessage For="@(() => _loginModel.Password)" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Signing In...</span>
                                }
                                else
                                {
                                    <span>Sign In</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="text-center mt-3">
                        <p>Don't have an account? <a href="/signup">Sign Up</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly LoginModel _loginModel = new();
    private string? _errorMessage;
    private bool _isLoading;

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        // If already logged in, redirect to home
        if (AuthService.IsLoggedIn)
        {
            NavManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        _errorMessage = null;
        _isLoading = true;

        try
        {
            var (user, error) = await AuthService.SignIn(_loginModel.Email, _loginModel.Password);
            
            if (user != null)
            {
                NavManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                _errorMessage = error ?? "Invalid email or password. Please try again.";
            }
        }
        catch (Exception)
        {
            _errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            _isLoading = false;
        }
    }
}